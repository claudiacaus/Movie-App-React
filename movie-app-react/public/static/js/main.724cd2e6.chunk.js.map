{"version":3,"sources":["images/movie-logo.svg","images/tmdb_logo.svg","components/Header/Header.styles.js","components/Header/index.js","config.js","components/HeroImage/HeroImage.styles.js","components/HeroImage/index.js","components/Grid/Grid.styles.js","components/Grid/index.js","components/Thumb/Thumb.styles.js","components/Thumb/index.js","components/Spinner/index.js","components/Spinner/Spinner.styles.js","images/search-icon.svg","components/SearchBar/SearchBar.styles.js","components/SearchBar/index.js","components/Button/Button.styles.js","components/Button/index.js","API.js","helpers.js","hooks/useHomeFetch.js","images/no_image.jpg","components/Home.js","components/BreadCrumb/BreadCrumb.styles.js","components/BreadCrumb/index.js","components/MovieInfo/MovieInfo.styles.js","components/MovieInfo/index.js","components/MovieInfoBar/MovieInfoBar.styles.js","components/MovieInfoBar/index.js","components/Actor/Actor.styles.js","components/Actor/index.js","components/Movie.js","hooks/useMovieFetch.js","components/NotFound.js","GlobalStyle.js","App.js","index.js"],"names":["Wrapper","styled","div","Content","LogoImg","img","TMDBLogoImg","Header","to","src","Logo","alt","TMDBLogo","API_URL","API_KEY","process","SEARCH_BASE_URL","POPULAR_BASE_URL","REQUEST_TOKEN_URL","LOGIN_URL","SESSION_ID_URL","IMAGE_BASE_URL","BACKDROP_SIZE","POSTER_SIZE","image","Text","HeroImage","title","text","Grid","header","children","Image","Thumb","movieId","clickable","Spinner","SearchBar","setSearchTerm","useState","state","setState","initial","useRef","useEffect","current","timer","setTimeout","clearTimeout","searchIcon","type","placeholder","onChange","event","currentTarget","value","button","Button","callback","onClick","defaultConfig","method","headers","apiSettings","fetchMovies","searchTerm","page","a","endpoint","fetch","json","fetchMovie","fetchCredits","creditsEndpoint","getRequestToken","reqToken","request_token","authenticate","requestToken","username","password","bodyData","body","JSON","stringify","success","sessionId","rateMovie","rating","calcTime","time","hours","Math","floor","mins","convertMoney","money","Intl","NumberFormat","style","currency","minimumFractionDigits","format","isPersistedState","stateName","sessionState","sessionStorage","getItem","parse","initialState","results","total_pages","total_results","Home","loading","setLoading","error","setError","isLoadingMore","setIsLoadingMore","API","movies","prevState","setItem","useHomeFetch","backdrop_path","original_title","overview","map","movie","poster_path","NoImage","id","BreadCrumb","movieTitle","backdrop","MovieInfo","className","vote_average","directors","length","director","name","credit_id","MovieInfoBar","budget","revenue","Actor","character","imageUrl","Movie","credits","crew","filter","member","job","actors","cast","useMovieFetch","useParams","runtime","actor","profile_path","NotFound","GlobalStyle","createGlobalStyle","App","path","element","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"oOAAe,MAA0B,uCCA1B,MAA0B,sC,cCE5BA,EAAUC,IAAOC,IAAV,gFAKPC,EAAUF,IAAOC,IAAV,+KASPE,EAAUH,IAAOI,IAAV,iHAQPC,EAAcL,IAAOI,IAAV,gH,OCJTE,EAZA,kBACb,cAACP,EAAD,UACE,eAACG,EAAD,WACE,cAAC,IAAD,CAAMK,GAAG,IAAT,SACE,cAACJ,EAAD,CAASK,IAAKC,EAAMC,IAAI,sBAG1B,cAACL,EAAD,CAAaG,IAAKG,EAAUD,IAAI,oBCbhCE,EAAU,gCACVC,EAAUC,mCAEVC,EAAe,UAAMH,EAAN,gCAAqCC,EAArC,0BACfG,EAAgB,UAAMJ,EAAN,iCAAsCC,EAAtC,mBAGhBI,EAAiB,UAAML,EAAN,4CAAiDC,GAClEK,EAAS,UAAMN,EAAN,4DAAiEC,GAC1EM,EAAc,UAAMP,EAAN,8CAAmDC,GAEjEO,EAAiB,6BAEjBC,EAAgB,QAEhBC,EAAc,OCfPvB,EAAUC,IAAOC,IAAV,gbAMV,qBAAGsB,SAgBArB,GAAUF,IAAOC,IAAV,gGAMPuB,GAAOxB,IAAOC,IAAV,8fCRFwB,GAjBG,SAAC,GAAD,IAAGF,EAAH,EAAGA,MAAOG,EAAV,EAAUA,MAAOC,EAAjB,EAAiBA,KAAjB,OAChB,cAAC,EAAD,CAASJ,MAAOA,EAAhB,SACE,cAAC,GAAD,UACE,eAACC,GAAD,WACE,6BAAKE,IACL,4BAAIC,YCRC5B,GAAUC,IAAOC,IAAV,gOAYPC,GAAUF,IAAOC,IAAV,kICEL2B,GAXF,SAAC,GAAD,IAAGC,EAAH,EAAGA,OAAQC,EAAX,EAAWA,SAAX,OACX,eAAC,GAAD,WACE,6BAAKD,IACL,cAAC,GAAD,UAAUC,QCNDC,GAAQ/B,IAAOI,IAAV,8UCuBH4B,GAlBD,SAAC,GAAD,IAAGT,EAAH,EAAGA,MAAOU,EAAV,EAAUA,QAASC,EAAnB,EAAmBA,UAAnB,OACZ,8BACGA,EACC,cAAC,IAAD,CAAM3B,GAAE,WAAM0B,GAAd,SACE,cAACF,GAAD,CAAOvB,IAAKe,EAAOb,IAAI,YAGzB,cAACqB,GAAD,CAAOvB,IAAKe,EAAOb,IAAI,mBCZdyB,GCAQnC,IAAOC,IAAV,qW,QCFL,OAA0B,wCCE5BF,GAAUC,IAAOC,IAAV,4IAQPC,GAAUF,IAAOC,IAAV,olBCgCLmC,GAnCG,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cACnB,EAA0BC,mBAAS,IAAnC,oBAAOC,EAAP,KAAcC,EAAd,KACMC,EAAUC,kBAAO,GAcvB,OAZAC,qBAAU,WACR,IAAIF,EAAQG,QAAZ,CAKA,IAAMC,EAAQC,YAAW,WACvBT,EAAcE,KACb,KACH,OAAO,kBAAMQ,aAAaF,IAPxBJ,EAAQG,SAAU,IAQnB,CAACP,EAAeE,IAGjB,cAAC,GAAD,UACE,eAAC,GAAD,WACE,qBAAK/B,IAAKwC,GAAYtC,IAAI,gBAC1B,uBACEuC,KAAK,OACLC,YAAY,eACZC,SAAU,SAACC,GAAD,OAAWZ,EAASY,EAAMC,cAAcC,QAClDA,MAAOf,UC7BJxC,GAAUC,IAAOuD,OAAV,+VCcLC,GAXA,SAAC,GAAD,IAAG7B,EAAH,EAAGA,KAAM8B,EAAT,EAASA,SAAT,OACb,cAAC,GAAD,CAASR,KAAK,SAASS,QAASD,EAAhC,SACG9B,K,4CCICgC,GAAgB,CACpBC,OAAQ,OACRC,QAAS,CACP,eAAgB,qBAKdC,GAAc,CAClBC,YAAY,WAAD,8BAAE,WAAOC,EAAYC,GAAnB,gBAAAC,EAAA,6DACLC,EAAWH,EAAU,UACpBjD,GADoB,OACFiD,EADE,iBACiBC,GADjB,UAEpBjD,EAFoB,iBAEKiD,GAHrB,SAISG,MAAMD,GAJf,8BAI0BE,OAJ1B,mFAAF,qDAAC,GAOZC,WAAW,WAAD,8BAAE,WAAOrC,GAAP,gBAAAiC,EAAA,6DACJC,EADI,UACUvD,EADV,iBAC0BqB,EAD1B,oBAC6CpB,GAD7C,SAEUuD,MAAMD,GAFhB,8BAE2BE,OAF3B,mFAAF,mDAAC,GAKXE,aAAa,WAAD,8BAAE,WAAOtC,GAAP,gBAAAiC,EAAA,6DACNM,EADM,UACe5D,EADf,iBAC+BqB,EAD/B,4BAC0DpB,GAD1D,SAEQuD,MAAMI,GAFd,8BAEgCH,OAFhC,mFAAF,mDAAC,GAMbI,gBAAgB,WAAD,8BAAE,6BAAAP,EAAA,sEACeE,MAAMnD,GADrB,8BACyCoD,OADzC,cACTK,EADS,yBAERA,EAASC,eAFD,2CAAF,kDAAC,GAIhBC,aAAa,WAAD,8BAAE,WAAOC,EAAcC,EAAUC,GAA/B,kBAAAb,EAAA,6DACNc,EAAW,CACfF,WACAC,WACAJ,cAAeE,GAJL,SASJT,MAAMlD,EAAD,aAAC,gBACPyC,IADM,IAETsB,KAAMC,KAAKC,UAAUH,MAXb,8BAaVX,OAbU,kBAeHe,QAfG,iCAiBFhB,MAAMjD,EAAD,aAAC,gBACPwC,IADM,IAETsB,KAAMC,KAAKC,UAAU,CAAER,cAAeE,OAnBhC,+BAqBRR,OArBQ,eAgBJgB,EAhBI,yBAsBHA,GAtBG,4CAAF,uDAAC,GAyBbC,UAAU,WAAD,8BAAE,WAAOD,EAAWpD,EAASqB,GAA3B,kBAAAY,EAAA,6DACHC,EADG,UACWvD,EADX,iBAC2BqB,EAD3B,2BACqDpB,EADrD,uBAC2EwE,GAD3E,SAIDjB,MAAMD,EAAD,aAAC,gBACPR,IADM,IAETsB,KAAMC,KAAKC,UAAU,CAAE7B,aANlB,8BAQPe,OARO,cAGHkB,EAHG,yBAUFA,GAVE,2CAAF,uDAAC,IAcGzB,MChFF0B,GAAW,SAACC,GACvB,IAAMC,EAAQC,KAAKC,MAAMH,EAAO,IAC1BI,EAAOJ,EAAO,GACpB,MAAM,GAAN,OAAUC,EAAV,aAAoBG,EAApB,MAIWC,GAAe,SAACC,GAM3B,OALkB,IAAIC,KAAKC,aAAa,QAAS,CAC/CC,MAAO,WACPC,SAAU,MACVC,sBAAuB,IAERC,OAAON,IAIbO,GAAmB,SAACC,GAC/B,IAAMC,EAAeC,eAAeC,QAAQH,GAC5C,OAAOC,GAAgBtB,KAAKyB,MAAMH,ICd9BI,GAAe,CACnB3C,KAAM,EACN4C,QAAS,GACTC,YAAa,EACbC,cAAe,GCVF,OAA0B,qCC2D1BC,GAvCF,WACX,MFR0B,WAC1B,MAAoC1E,mBAAS,IAA7C,oBAAO0B,EAAP,KAAmB3B,EAAnB,KACA,EAA0BC,mBAASsE,IAAnC,oBAAOrE,EAAP,KAAcC,EAAd,KACA,EAA8BF,oBAAS,GAAvC,oBAAO2E,EAAP,KAAgBC,EAAhB,KACA,EAA0B5E,oBAAS,GAAnC,oBAAO6E,EAAP,KAAcC,EAAd,KACA,EAA0C9E,oBAAS,GAAnD,oBAAO+E,EAAP,KAAsBC,EAAtB,KAEMvD,EAAW,yCAAG,WAAOE,GAAP,8BAAAC,EAAA,6DAAaF,EAAb,+BAA0B,GAA1B,SAEhBoD,GAAS,GACTF,GAAW,GAHK,SAKKK,GAAIxD,YAAYC,EAAYC,GALjC,OAKVuD,EALU,OAOhBhF,GAAS,SAACiF,GAAD,oBAAC,gBACLD,GADI,IAEPX,QACE5C,EAAO,EAAP,uBACQwD,EAAUZ,SADlB,aAC8BW,EAAOX,UADrC,aAEQW,EAAOX,cAZH,kDAehBO,GAAS,GAfO,QAiBlBF,GAAW,GAjBO,0DAAH,sDAqDjB,OA/BAvE,qBAAU,WACR,IAAKqB,EAAY,CACf,IAAMwC,EAAeF,GAAiB,aAEtC,GAAIE,EAGF,YADAhE,EAASgE,GAMbhE,EAASoE,IACT7C,EAAY,EAAGC,KACd,CAACA,IAGJrB,qBAAU,WACH0E,IAELtD,EAAYxB,EAAM0B,KAAO,EAAGD,GAC5BsD,GAAiB,MAChB,CAACD,EAAerD,EAAYzB,EAAM0B,OAGrCtB,qBAAU,WACHqB,GACHyC,eAAeiB,QAAQ,YAAaxC,KAAKC,UAAU5C,MAEpD,CAACA,EAAOyB,IAEJ,CAAEzB,QAAO0E,UAASE,QAAOnD,aAAY3B,gBAAeiF,oBEnDzDK,GADMpF,EAAR,EAAQA,MAAO0E,EAAf,EAAeA,QAASE,EAAxB,EAAwBA,MAAOnD,EAA/B,EAA+BA,WAAY3B,EAA3C,EAA2CA,cAAeiF,EAA1D,EAA0DA,iBAG1D,OAAIH,EAAc,2DAGhB,sCACInD,GAAczB,EAAMsE,QAAQ,GAC5B,cAAC,GAAD,CACEtF,MAAK,UAAKH,GAAL,OAAsBC,GAAtB,OAAsCkB,EAAMsE,QAAQ,GAAGe,eAC5DlG,MAAOa,EAAMsE,QAAQ,GAAGgB,eACxBlG,KAAMY,EAAMsE,QAAQ,GAAGiB,WAEvB,KAEJ,cAAC,GAAD,CAAWzF,cAAeA,IAC1B,cAAC,GAAD,CAAMR,OAAQmC,EAAa,gBAAkB,iBAA7C,SACGzB,EAAMsE,QAAQkB,KAAI,SAACC,GAAD,OACjB,cAAC,GAAD,CAEE9F,WAAW,EACXX,MACEyG,EAAMC,YACF7G,EAAiBE,EAAc0G,EAAMC,YACrCC,GAENjG,QAAS+F,EAAMG,IAPVH,EAAMG,SAWhBlB,GAAW,cAAC,GAAD,IACX1E,EAAM0B,KAAO1B,EAAMuE,cAAgBG,GAClC,cAAC,GAAD,CAAQtF,KAAK,YAAY8B,SAAU,kBAAM6D,GAAiB,UCnDrDvH,GAAUC,IAAOC,IAAV,0LAUPC,GAAUF,IAAOC,IAAV,ySCULmI,GAhBI,SAAC,GAAD,IAAGC,EAAH,EAAGA,WAAH,OACjB,cAAC,GAAD,UACE,eAAC,GAAD,WACE,cAAC,IAAD,CAAM9H,GAAG,IAAT,SACE,0CAEF,qCACA,+BAAO8H,UCVAtI,GAAUC,IAAOC,IAAV,qRACJ,gBAAGqI,EAAH,EAAGA,SAAH,OACZA,EAAQ,cAAUlH,GAAV,OAA2BC,GAA3B,OAA2CiH,EAA3C,KAAyD,UAexDpI,GAAUF,IAAOC,IAAV,sPAYPuB,GAAOxB,IAAOC,IAAV,8lBCiBFsI,GArCG,SAAC,GAAD,IAAGP,EAAH,EAAGA,MAAH,OAChB,cAAC,GAAD,CAASM,SAAUN,EAAMJ,cAAzB,SACE,eAAC,GAAD,WACE,cAAC,GAAD,CACErG,MACEyG,EAAMC,YAAN,UACO7G,GADP,OACwBE,GADxB,OACsC0G,EAAMC,aACxCC,GAENhG,WAAW,IAEb,eAAC,GAAD,WACE,6BAAK8F,EAAMtG,QACX,sCACA,4BAAIsG,EAAMF,WAEV,sBAAKU,UAAU,mBAAf,UACE,gCACE,wCACA,qBAAKA,UAAU,QAAf,SAAwBR,EAAMS,kBAEhC,sBAAKD,UAAU,WAAf,UACE,0CAAaR,EAAMU,UAAUC,OAAS,EAAI,IAAM,MAC/CX,EAAMU,UAAUX,KAAI,SAACa,GAAD,OACnB,4BAA6BA,EAASC,MAA9BD,EAASE,6BClClB/I,GAAUC,IAAOC,IAAV,gJAQPC,GAAUF,IAAOC,IAAV,ugBCqBL8I,GAxBM,SAAC,GAAD,IAAGtD,EAAH,EAAGA,KAAMuD,EAAT,EAASA,OAAQC,EAAjB,EAAiBA,QAAjB,OACnB,cAAC,GAAD,UACE,eAAC,GAAD,WACE,qBAAKT,UAAU,SAAf,SACE,+CAAkBhD,GAASC,GAA3B,SAGF,qBAAK+C,UAAU,SAAf,SACE,yCAAY1C,GAAakD,GAAzB,SAGF,qBAAKR,UAAU,SAAf,SACE,0CAAa1C,GAAamD,GAA1B,eCjBKlJ,GAAUC,IAAOC,IAAV,8NAgBP8B,GAAQ/B,IAAOI,IAAV,+HCCH8I,GAdD,SAAC,GAAD,IAAGL,EAAH,EAAGA,KAAMM,EAAT,EAASA,UAAWC,EAApB,EAAoBA,SAApB,OACZ,eAAC,GAAD,WACE,cAAC,GAAD,CAAO5I,IAAK4I,EAAU1I,IAAKmI,IAC3B,6BAAKA,IACL,4BAAIM,QC2COE,GAnCD,WACZ,IACA,ECd2B,SAACpH,GAC5B,MAA0BK,mBAAS,IAAnC,oBAAOC,EAAP,KAAcC,EAAd,KACA,EAA8BF,oBAAS,GAAvC,oBAAO2E,EAAP,KAAgBC,EAAhB,KACA,EAA0B5E,oBAAS,GAAnC,oBAAO6E,EAAP,KAAcC,EAAd,KA4CA,OA1CAzE,qBAAU,WAER,IAAM2B,EAAU,yCAAG,iCAAAJ,EAAA,sEAEfkD,GAAS,GACTF,GAAW,GAHI,SAKKK,GAAIjD,WAAWrC,GALpB,cAKT+F,EALS,gBAMOT,GAAIhD,aAAatC,GANxB,OAMTqH,EANS,OAQTZ,EAAYY,EAAQC,KAAKC,QAC7B,SAACC,GAAD,MAA2B,aAAfA,EAAOC,OAGrBlH,EAAS,6BACJwF,GADG,IAEN2B,OAAQL,EAAQM,KAChBlB,eAGFxB,GAAW,GAlBI,kDAoBfE,GAAS,GApBM,0DAAH,qDAwBVZ,EAAeF,GAAiBrE,GAEtC,GAAIuE,EAGF,OAFAhE,EAASgE,QACTU,GAAW,GAIb5C,MACC,CAACrC,IAGJU,qBAAU,WACR8D,eAAeiB,QAAQzF,EAASiD,KAAKC,UAAU5C,MAC9C,CAACA,EAAON,IAEJ,CAAEM,QAAO0E,UAASE,SDjCgB0C,CADrBC,cAAZ7H,SACO+F,EAAf,EAAQzF,MAAc0E,EAAtB,EAAsBA,QAASE,EAA/B,EAA+BA,MAE/B,OAAIF,EAAgB,cAAC,GAAD,IAChBE,EAAc,2DAGhB,qCACE,cAAC,GAAD,CAAYkB,WAAYL,EAAMH,iBAC9B,cAAC,GAAD,CAAWG,MAAOA,IAClB,cAAC,GAAD,CACEvC,KAAMuC,EAAM+B,QACZf,OAAQhB,EAAMgB,OACdC,QAASjB,EAAMiB,UAEjB,cAAC,GAAD,CAAMpH,OAAO,SAAb,SACGmG,EAAM2B,OAAO5B,KAAI,SAACiC,GAAD,OAChB,cAAC,GAAD,CAEEA,MAAOA,EACPnB,KAAMmB,EAAMnB,KACZM,UAAWa,EAAMb,UACjBC,SACEY,EAAMC,aAAN,UACO7I,GADP,OACwBE,GADxB,OACsC0I,EAAMC,cACxC/B,IAPD8B,EAAMlB,oBEhCRoB,GAFE,kBAAM,6CCAVC,GAAcC,YAAH,opBCwBTC,GAbH,kBACV,eAAC,IAAD,WACE,cAAC,EAAD,IACA,eAAC,IAAD,WACE,cAAC,IAAD,CAAOC,KAAK,IAAIC,QAAS,cAAC,GAAD,MACzB,cAAC,IAAD,CAAOD,KAAK,YAAYC,QAAS,cAAC,GAAD,MACjC,cAAC,IAAD,CAAOD,KAAK,KAAKC,QAAS,cAAC,GAAD,SAG5B,cAACJ,GAAD,QClBJK,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,GAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.724cd2e6.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/movie-logo.76c6b38e.svg\";","export default __webpack_public_path__ + \"static/media/tmdb_logo.f15b6632.svg\";","import styled from 'styled-components';\r\n\r\nexport const Wrapper = styled.div`\r\n  background: var(--darkGrey);\r\n  padding: 0 20px;\r\n`;\r\n\r\nexport const Content = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: space-between;\r\n  max-width: var(--maxWidth);\r\n  padding: 20px 0;\r\n  margin: 0 auto;\r\n`;\r\n\r\nexport const LogoImg = styled.img`\r\n  width: 200px;\r\n\r\n  @media screen and (max-width: 500px) {\r\n    width: 150px;\r\n  }\r\n`;\r\n\r\nexport const TMDBLogoImg = styled.img`\r\n  width: 100px;\r\n\r\n  @media screen and (max-width: 500px) {\r\n    width: 80px;\r\n  }\r\n`;\r\n","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\n\r\nimport Logo from '../../images/movie-logo.svg';\r\nimport TMDBLogo from '../../images/tmdb_logo.svg';\r\n\r\nimport { Wrapper, Content, LogoImg, TMDBLogoImg } from './Header.styles';\r\n\r\nconst Header = () => (\r\n  <Wrapper>\r\n    <Content>\r\n      <Link to=\"/\">\r\n        <LogoImg src={Logo} alt=\"Movie Time Logo\" />\r\n      </Link>\r\n\r\n      <TMDBLogoImg src={TMDBLogo} alt=\"TMDb Logo\" />\r\n    </Content>\r\n  </Wrapper>\r\n);\r\n\r\nexport default Header;\r\n","// Configuration for TMDB API\n\nconst API_URL = 'https://api.themoviedb.org/3/';\nconst API_KEY = process.env.REACT_APP_API_KEY;\n\nconst SEARCH_BASE_URL = `${API_URL}search/movie?api_key=${API_KEY}&language=en-US&query=`;\nconst POPULAR_BASE_URL = `${API_URL}movie/popular?api_key=${API_KEY}&language=en-US`;\n\n// For login and voting\nconst REQUEST_TOKEN_URL = `${API_URL}authentication/token/new?api_key=${API_KEY}`;\nconst LOGIN_URL = `${API_URL}authentication/token/validate_with_login?api_key=${API_KEY}`;\nconst SESSION_ID_URL = `${API_URL}authentication/session/new?api_key=${API_KEY}`;\n\nconst IMAGE_BASE_URL = 'http://image.tmdb.org/t/p/';\n// Sizes: w300, w780, w1280, original\nconst BACKDROP_SIZE = 'w1280';\n// w92, w154, w185, w342, w500, w780, original\nconst POSTER_SIZE = 'w780';\n\nexport {\n  SEARCH_BASE_URL,\n  POPULAR_BASE_URL,\n  API_URL,\n  API_KEY,\n  IMAGE_BASE_URL,\n  BACKDROP_SIZE,\n  POSTER_SIZE,\n  REQUEST_TOKEN_URL,\n  LOGIN_URL,\n  SESSION_ID_URL,\n};\n","import styled from 'styled-components';\r\n\r\nexport const Wrapper = styled.div`\r\n  background: linear-gradient(\r\n      to bottom,\r\n      rgba(0, 0, 0, 0) 41%,\r\n      rgba(0, 0, 0, 0.65) 100%\r\n    ),\r\n    url(${({ image }) => image}), var(--darkGrey);\r\n  background-size: 100%, cover;\r\n  background-position: center;\r\n  height: 700px;\r\n  position: relative;\r\n  animation: animateHeroImage 1s;\r\n  @keyframes animateHeroImage {\r\n    from {\r\n      opacity: 0;\r\n    }\r\n    to {\r\n      opacity: 1;\r\n    }\r\n  }\r\n`;\r\n\r\nexport const Content = styled.div`\r\n  padding: 20px;\r\n  max-width: var(--maxWidth);\r\n  margin: 0 auto;\r\n`;\r\n\r\nexport const Text = styled.div`\r\n  z-index: 100;\r\n  max-width: 700px;\r\n  position: absolute;\r\n  bottom: 40px;\r\n  margin-right: 20px;\r\n  min-height: 100px;\r\n  color: var(--white);\r\n  h1 {\r\n    font-size: var(--fontSuperBig);\r\n    @media screen and (max-width: 720px) {\r\n      font-size: var(--fontBig);\r\n    }\r\n  }\r\n  p {\r\n    font-size: var(--fontMed);\r\n    @media screen and (max-width: 720px) {\r\n      font-size: var(--fontSmall);\r\n    }\r\n  }\r\n  @media screen and (max-width: 720px) {\r\n    max-width: 100%;\r\n  }\r\n`;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n// Styles\r\nimport { Wrapper, Content, Text } from './HeroImage.styles';\r\n\r\nconst HeroImage = ({ image, title, text }) => (\r\n  <Wrapper image={image}>\r\n    <Content>\r\n      <Text>\r\n        <h1>{title}</h1>\r\n        <p>{text}</p>\r\n      </Text>\r\n    </Content>\r\n  </Wrapper>\r\n);\r\n\r\nHeroImage.propTypes = {\r\n  image: PropTypes.string,\r\n  title: PropTypes.string,\r\n  text: PropTypes.string,\r\n};\r\n\r\nexport default HeroImage;\r\n","import styled from 'styled-components';\r\n\r\nexport const Wrapper = styled.div`\r\n  max-width: var(--maxWidth);\r\n  margin: 0 auto;\r\n  padding: 0 20px;\r\n  h1 {\r\n    color: var(--medGrey);\r\n    @media screen and (max-width: 768px) {\r\n      font-size: var(--fontBig);\r\n    }\r\n  }\r\n`;\r\n\r\nexport const Content = styled.div`\r\n  display: grid;\r\n  grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));\r\n  grid-gap: 2rem;\r\n`;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n// Styles\r\nimport { Wrapper, Content } from './Grid.styles';\r\n\r\nconst Grid = ({ header, children }) => (\r\n  <Wrapper>\r\n    <h1>{header}</h1>\r\n    <Content>{children}</Content>\r\n  </Wrapper>\r\n);\r\n\r\nGrid.propTypes = {\r\n  header: PropTypes.string,\r\n};\r\n\r\nexport default Grid;\r\n","import styled from 'styled-components';\r\n\r\nexport const Image = styled.img`\r\n  width: 100%;\r\n  height: 100%;\r\n  max-width: 720px;\r\n  transition: all 0.3s;\r\n  object-fit: cover;\r\n  border-radius: 20px;\r\n  animation: animateThumb 0.5s;\r\n\r\n  :hover {\r\n    opacity: 0.8;\r\n  }\r\n\r\n  @keyframes animateThumb {\r\n    from {\r\n      opacity: 0;\r\n    }\r\n    to {\r\n      opacity: 1;\r\n    }\r\n  }\r\n`;\r\n","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport PropTypes from 'prop-types';\r\n// Styles\r\nimport { Image } from './Thumb.styles';\r\n\r\n// if we want to use the image as a link, we need to wrap it in a Link component, and pass the image as a prop.\r\nconst Thumb = ({ image, movieId, clickable }) => (\r\n  <div>\r\n    {clickable ? (\r\n      <Link to={`/${movieId}`}>\r\n        <Image src={image} alt=\"movie\" />\r\n      </Link>\r\n    ) : (\r\n      <Image src={image} alt=\"movie-thumb\" />\r\n    )}\r\n  </div>\r\n);\r\n\r\nThumb.propTypes = {\r\n  image: PropTypes.string,\r\n  movieId: PropTypes.number,\r\n  clickable: PropTypes.bool,\r\n};\r\n\r\nexport default Thumb;\r\n","import { Spinner } from './Spinner.styles';\r\n\r\nexport default Spinner;\r\n","import styled from 'styled-components';\r\n\r\nexport const Spinner = styled.div`\r\n  border: 5px solid var(--lightGrey);\r\n  border-top: 5px solid var(--medGrey);\r\n  border-radius: 50%;\r\n  width: 50px;\r\n  height: 50px;\r\n  animation: spin 0.8s linear infinite;\r\n  margin: 50px auto;\r\n\r\n  @keyframes spin {\r\n    0% {\r\n      transform: rotate(0deg);\r\n    }\r\n    100% {\r\n      transform: rotate(360deg);\r\n    }\r\n  }\r\n`;\r\n","export default __webpack_public_path__ + \"static/media/search-icon.cd820f5a.svg\";","import styled from 'styled-components';\r\n\r\nexport const Wrapper = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  height: 100px;\r\n  background: var(--darkGrey);\r\n  padding: 0 20px;\r\n`;\r\n\r\nexport const Content = styled.div`\r\n  position: relative;\r\n  max-width: var(--maxWidth);\r\n  width: 100%;\r\n  height: 55px;\r\n  background: var(--medGrey);\r\n  margin: 0 auto;\r\n  border-radius: 40px;\r\n  color: var(--white);\r\n\r\n  img {\r\n    position: absolute;\r\n    left: 15px;\r\n    top: 14px;\r\n    width: 30px;\r\n  }\r\n\r\n  input {\r\n    font-size: var(--fontBig);\r\n    position: absolute;\r\n    left: 0;\r\n    margin: 8px 0;\r\n    padding: 0 0 0 60px;\r\n    border: none;\r\n    width: 95%;\r\n    background: transparent;\r\n    height: 40px;\r\n    color: var(--white);\r\n\r\n    :focus {\r\n      outline: none;\r\n    }\r\n  }\r\n`;\r\n","import React, { useEffect, useState, useRef } from 'react';\r\nimport PropTypes from 'prop-types';\r\n// Image\r\nimport searchIcon from '../../images/search-icon.svg';\r\n// Styles\r\nimport { Wrapper, Content } from './SearchBar.styles';\r\n\r\nconst SearchBar = ({ setSearchTerm }) => {\r\n  const [state, setState] = useState('');\r\n  const initial = useRef(true); // useRef to prevent re-rendering\r\n\r\n  useEffect(() => {\r\n    if (initial.current) {\r\n      initial.current = false;\r\n      return;\r\n    }\r\n\r\n    const timer = setTimeout(() => {\r\n      setSearchTerm(state);\r\n    }, 500);\r\n    return () => clearTimeout(timer);\r\n  }, [setSearchTerm, state]);\r\n\r\n  return (\r\n    <Wrapper>\r\n      <Content>\r\n        <img src={searchIcon} alt=\"search-icon\" />\r\n        <input\r\n          type=\"text\"\r\n          placeholder=\"Search Movie\"\r\n          onChange={(event) => setState(event.currentTarget.value)}\r\n          value={state}\r\n        />\r\n      </Content>\r\n    </Wrapper>\r\n  );\r\n};\r\n\r\nSearchBar.propTypes = {\r\n  setSearchTerm: PropTypes.func,\r\n};\r\n\r\nexport default SearchBar;\r\n","import styled from 'styled-components';\r\n\r\nexport const Wrapper = styled.button`\r\n  display: block;\r\n  background: var(--darkGrey);\r\n  width: 25%;\r\n  min-width: 200px;\r\n  height: 60px;\r\n  border-radius: 30px;\r\n  color: var(--white);\r\n  border: none;\r\n  font-size: var(--fontBig);\r\n  margin: 20px auto;\r\n  transition: all 0.3s;\r\n  outline: none;\r\n  cursor: pointer;\r\n\r\n  &:hover {\r\n    opacity: 0.8;\r\n  }\r\n`;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n// Styles\r\nimport { Wrapper } from './Button.styles';\r\n\r\nconst Button = ({ text, callback }) => (\r\n  <Wrapper type=\"button\" onClick={callback}>\r\n    {text}\r\n  </Wrapper>\r\n);\r\n\r\nButton.propTypes = {\r\n  text: PropTypes.string,\r\n  callback: PropTypes.func,\r\n};\r\n\r\nexport default Button;\r\n","import {\n  SEARCH_BASE_URL,\n  POPULAR_BASE_URL,\n  API_URL,\n  API_KEY,\n  REQUEST_TOKEN_URL,\n  LOGIN_URL,\n  SESSION_ID_URL,\n} from './config';\n\n// method Post request to get request token\nconst defaultConfig = {\n  method: 'POST',\n  headers: {\n    'Content-Type': 'application/json',\n  },\n};\n\n// Fetch multiple movies\nconst apiSettings = {\n  fetchMovies: async (searchTerm, page) => {\n    const endpoint = searchTerm\n      ? `${SEARCH_BASE_URL}${searchTerm}&page=${page}`\n      : `${POPULAR_BASE_URL}&page=${page}`;\n    return await (await fetch(endpoint)).json();\n  },\n  // Fetch a single movie\n  fetchMovie: async (movieId) => {\n    const endpoint = `${API_URL}movie/${movieId}?api_key=${API_KEY}`;\n    return await (await fetch(endpoint)).json();\n  },\n  // Fetch movie credits\n  fetchCredits: async (movieId) => {\n    const creditsEndpoint = `${API_URL}movie/${movieId}/credits?api_key=${API_KEY}`;\n    return await (await fetch(creditsEndpoint)).json();\n  },\n\n  // Login section\n  getRequestToken: async () => {\n    const reqToken = await (await fetch(REQUEST_TOKEN_URL)).json();\n    return reqToken.request_token;\n  },\n  authenticate: async (requestToken, username, password) => {\n    const bodyData = {\n      username,\n      password,\n      request_token: requestToken,\n    };\n\n    // First authenticate the requestToken\n    const data = await (\n      await fetch(LOGIN_URL, {\n        ...defaultConfig,\n        body: JSON.stringify(bodyData),\n      })\n    ).json();\n    // Then get the sessionId with the requestToken\n    if (data.success) {\n      const sessionId = await (\n        await fetch(SESSION_ID_URL, {\n          ...defaultConfig,\n          body: JSON.stringify({ request_token: requestToken }),\n        })\n      ).json();\n      return sessionId;\n    }\n  },\n  rateMovie: async (sessionId, movieId, value) => {\n    const endpoint = `${API_URL}movie/${movieId}/rating?api_key=${API_KEY}&session_id=${sessionId}`;\n\n    const rating = await (\n      await fetch(endpoint, {\n        ...defaultConfig,\n        body: JSON.stringify({ value }),\n      })\n    ).json();\n\n    return rating;\n  },\n};\n\nexport default apiSettings;\n","// Convert time to hours and minutes\nexport const calcTime = (time) => {\n  const hours = Math.floor(time / 60);\n  const mins = time % 60;\n  return `${hours}h ${mins}m`;\n};\n\n// Convert a number to money formatting\nexport const convertMoney = (money) => {\n  const formatter = new Intl.NumberFormat('en-US', {\n    style: 'currency',\n    currency: 'USD',\n    minimumFractionDigits: 0,\n  });\n  return formatter.format(money);\n};\n\n// Persist data to sessionStorage\nexport const isPersistedState = (stateName) => {\n  const sessionState = sessionStorage.getItem(stateName); // Get state from sessionStorage\n  return sessionState && JSON.parse(sessionState); // If state exists, return it\n};\n","import { useState, useEffect } from 'react';\r\n// API\r\nimport API from '../API';\r\n// Helpers\r\nimport { isPersistedState } from '../helpers';\r\n\r\nconst initialState = {\r\n  page: 0,\r\n  results: [],\r\n  total_pages: 0,\r\n  total_results: 0,\r\n};\r\n\r\nexport const useHomeFetch = () => {\r\n  const [searchTerm, setSearchTerm] = useState('');\r\n  const [state, setState] = useState(initialState); // state is the data that we are fetching from the API\r\n  const [loading, setLoading] = useState(false);\r\n  const [error, setError] = useState(false);\r\n  const [isLoadingMore, setIsLoadingMore] = useState(false);\r\n\r\n  const fetchMovies = async (page, searchTerm = '') => {\r\n    try {\r\n      setError(false);\r\n      setLoading(false);\r\n\r\n      const movies = await API.fetchMovies(searchTerm, page);\r\n\r\n      setState((prevState) => ({\r\n        ...movies,\r\n        results:\r\n          page > 1\r\n            ? [...prevState.results, ...movies.results]\r\n            : [...movies.results],\r\n      }));\r\n    } catch (error) {\r\n      setError(true);\r\n    }\r\n    setLoading(false);\r\n  };\r\n\r\n  // Initial and search. Will run on the first render, and then every time the page is refreshed\r\n  // or the search term is changed\r\n  useEffect(() => {\r\n    if (!searchTerm) {\r\n      const sessionState = isPersistedState('homeState');\r\n\r\n      if (sessionState) {\r\n        // console.log('Grabbing from the session storage');\r\n        setState(sessionState);\r\n        return;\r\n      }\r\n    }\r\n\r\n    // console.log('Grabbing from API');\r\n    setState(initialState);\r\n    fetchMovies(1, searchTerm); // 1st page and searchTerm\r\n  }, [searchTerm]);\r\n\r\n  // Loading more movies, when clicking on the button\r\n  useEffect(() => {\r\n    if (!isLoadingMore) return;\r\n\r\n    fetchMovies(state.page + 1, searchTerm); // next page\r\n    setIsLoadingMore(false); // reset\r\n  }, [isLoadingMore, searchTerm, state.page]); // always specify the dependencies\r\n\r\n  // Write to sessionStorage\r\n  useEffect(() => {\r\n    if (!searchTerm) {\r\n      sessionStorage.setItem('homeState', JSON.stringify(state)); // write to sessionStorage only if searchTerm is empty (initial state)\r\n    }\r\n  }, [state, searchTerm]);\r\n\r\n  return { state, loading, error, searchTerm, setSearchTerm, setIsLoadingMore };\r\n};\r\n","export default __webpack_public_path__ + \"static/media/no_image.22d2aa4d.jpg\";","import React from 'react';\r\n\r\n// Config\r\nimport { POSTER_SIZE, BACKDROP_SIZE, IMAGE_BASE_URL } from '../config';\r\n\r\n// Components\r\nimport HeroImage from './HeroImage';\r\nimport Grid from './Grid';\r\nimport Thumb from './Thumb';\r\nimport Spinner from './Spinner';\r\nimport SearchBar from './SearchBar';\r\nimport Button from './Button';\r\n\r\n// Hook\r\nimport { useHomeFetch } from '../hooks/useHomeFetch';\r\n\r\n// Image\r\nimport NoImage from '../images/no_image.jpg';\r\n\r\n// setSearchTerm is used to create a short delay between the user typing and the search being executed, to create a more fluid experience\r\nconst Home = () => {\r\n  const { state, loading, error, searchTerm, setSearchTerm, setIsLoadingMore } =\r\n    useHomeFetch();\r\n\r\n  if (error) return <div>Something went wrong ...</div>;\r\n\r\n  return (\r\n    <>\r\n      {!searchTerm && state.results[0] ? ( // If there is no search term, and there is a result, display the hero image\r\n        <HeroImage\r\n          image={`${IMAGE_BASE_URL}${BACKDROP_SIZE}${state.results[0].backdrop_path}`}\r\n          title={state.results[0].original_title}\r\n          text={state.results[0].overview}\r\n        />\r\n      ) : null}\r\n\r\n      <SearchBar setSearchTerm={setSearchTerm} />\r\n      <Grid header={searchTerm ? 'Search Result' : 'Popular Movies'}>\r\n        {state.results.map((movie) => (\r\n          <Thumb\r\n            key={movie.id}\r\n            clickable={true}\r\n            image={\r\n              movie.poster_path\r\n                ? IMAGE_BASE_URL + POSTER_SIZE + movie.poster_path\r\n                : NoImage\r\n            }\r\n            movieId={movie.id}\r\n          />\r\n        ))}\r\n      </Grid>\r\n      {loading && <Spinner />}\r\n      {state.page < state.total_pages && !loading && (\r\n        <Button text=\"Load More\" callback={() => setIsLoadingMore(true)} />\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Home;\r\n","import styled from 'styled-components';\r\n\r\nexport const Wrapper = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  width: 100%;\r\n  height: 75px;\r\n  background: var(--medGrey);\r\n  color: var(--white);\r\n`;\r\n\r\nexport const Content = styled.div`\r\n  display: flex;\r\n  width: 100%;\r\n  max-width: var(--maxWidth);\r\n  padding: 0 20px;\r\n\r\n  span {\r\n    font-size: var(--fontMed);\r\n    color: var(--white);\r\n    padding-right: 10px;\r\n  }\r\n\r\n  @media screen and (max-width: 768px) {\r\n    font-size: var(--fontSmall);\r\n  }\r\n`;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { Link } from 'react-router-dom';\r\n// Styles\r\nimport { Wrapper, Content } from './BreadCrumb.styles';\r\n\r\nconst BreadCrumb = ({ movieTitle }) => (\r\n  <Wrapper>\r\n    <Content>\r\n      <Link to=\"/\">\r\n        <span>Home</span>\r\n      </Link>\r\n      <span>|</span>\r\n      <span>{movieTitle}</span>\r\n    </Content>\r\n  </Wrapper>\r\n);\r\n\r\nBreadCrumb.propTypes = {\r\n  movieTitle: PropTypes.string,\r\n};\r\n\r\nexport default BreadCrumb;\r\n","import styled from 'styled-components';\r\nimport { IMAGE_BASE_URL, BACKDROP_SIZE } from '../../config';\r\n\r\nexport const Wrapper = styled.div`\r\n  background: ${({ backdrop }) =>\r\n    backdrop ? `url(${IMAGE_BASE_URL}${BACKDROP_SIZE}${backdrop})` : '#000'};\r\n  background-size: cover;\r\n  background-position: center;\r\n  padding: 40px 20px;\r\n  animation: animateMovieInfo 1s;\r\n  @keyframes animateMovieInfo {\r\n    from {\r\n      opacity: 0;\r\n    }\r\n    to {\r\n      opacity: 1;\r\n    }\r\n  }\r\n`;\r\n\r\nexport const Content = styled.div`\r\n  display: flex;\r\n  max-width: var(--maxWidth);\r\n  margin: 0 auto;\r\n  background: rgba(0, 0, 0, 0.7);\r\n  border-radius: 20px;\r\n  @media screen and (max-width: 768px) {\r\n    display: block;\r\n    max-height: none;\r\n  }\r\n`;\r\n\r\nexport const Text = styled.div`\r\n  width: 100%;\r\n  padding: 20px 40px;\r\n  color: var(--white);\r\n  overflow: hidden;\r\n  .rating-directors {\r\n    display: flex;\r\n    justify-content: flex-start;\r\n  }\r\n  .score {\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n    width: 35px;\r\n    height: 35px;\r\n    background: #fff;\r\n    color: #000;\r\n    font-weight: 800;\r\n    border-radius: 50%;\r\n    margin: 0;\r\n  }\r\n  .director {\r\n    margin: 0 0 0 40px;\r\n    p {\r\n      margin: 0;\r\n    }\r\n  }\r\n  h1 {\r\n    @media screen and (max-width: 768px) {\r\n      font-size: var(--fontBig);\r\n    }\r\n  }\r\n`;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\n// Components\r\nimport Thumb from '../Thumb';\r\n// Config\r\nimport { IMAGE_BASE_URL, POSTER_SIZE } from '../../config';\r\n// Image\r\nimport NoImage from '../../images/no_image.jpg';\r\n// Styles\r\nimport { Wrapper, Content, Text } from './MovieInfo.styles';\r\n\r\nconst MovieInfo = ({ movie }) => (\r\n  <Wrapper backdrop={movie.backdrop_path}>\r\n    <Content>\r\n      <Thumb\r\n        image={\r\n          movie.poster_path\r\n            ? `${IMAGE_BASE_URL}${POSTER_SIZE}${movie.poster_path}`\r\n            : NoImage\r\n        }\r\n        clickable={false}\r\n      />\r\n      <Text>\r\n        <h1>{movie.title}</h1>\r\n        <h3>PLOT</h3>\r\n        <p>{movie.overview}</p>\r\n\r\n        <div className=\"rating-directors\">\r\n          <div>\r\n            <h3>RATING</h3>\r\n            <div className=\"score\">{movie.vote_average}</div>\r\n          </div>\r\n          <div className=\"director\">\r\n            <h3>DIRECTOR{movie.directors.length > 1 ? 'S' : ''}</h3>\r\n            {movie.directors.map((director) => (\r\n              <p key={director.credit_id}>{director.name}</p>\r\n            ))}\r\n          </div>\r\n        </div>\r\n      </Text>\r\n    </Content>\r\n  </Wrapper>\r\n);\r\n\r\nMovieInfo.propTypes = {\r\n  movie: PropTypes.object,\r\n};\r\n\r\nexport default MovieInfo;\r\n","import styled from 'styled-components';\r\n\r\nexport const Wrapper = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  min-height: 100px;\r\n  background: var(--darkGrey);\r\n  padding: 0 20px;\r\n`;\r\n\r\nexport const Content = styled.div`\r\n  display: flex;\r\n  max-width: var(--maxWidth);\r\n  width: 100%;\r\n  margin: 0 auto;\r\n\r\n  .column {\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n    background: var(--medGrey);\r\n    border-radius: 20px;\r\n    margin: 0 20px;\r\n    flex: 1;\r\n\r\n    :first-child {\r\n      margin-left: 0;\r\n    }\r\n    :last-child {\r\n      margin-right: 0;\r\n    }\r\n  }\r\n\r\n  @media screen and (max-width: 768px) {\r\n    display: block;\r\n    .column {\r\n      margin: 20px 0;\r\n    }\r\n  }\r\n`;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n// Helpers\r\nimport { calcTime, convertMoney } from '../../helpers';\r\n// Styles\r\nimport { Wrapper, Content } from './MovieInfoBar.styles';\r\n\r\nconst MovieInfoBar = ({ time, budget, revenue }) => (\r\n  <Wrapper>\r\n    <Content>\r\n      <div className=\"column\">\r\n        <p>Running time: {calcTime(time)} </p>\r\n      </div>\r\n\r\n      <div className=\"column\">\r\n        <p>Budget: {convertMoney(budget)} </p>\r\n      </div>\r\n\r\n      <div className=\"column\">\r\n        <p>Revenue: {convertMoney(revenue)} </p>\r\n      </div>\r\n    </Content>\r\n  </Wrapper>\r\n);\r\n\r\nMovieInfoBar.propTypes = {\r\n  time: PropTypes.number,\r\n  budget: PropTypes.number,\r\n  revenue: PropTypes.number,\r\n};\r\n\r\nexport default MovieInfoBar;\r\n","import styled from 'styled-components';\r\n\r\nexport const Wrapper = styled.div`\r\n  color: var(--white);\r\n  background: var(--darkGrey);\r\n  border-radius: 20px;\r\n  padding: 5px;\r\n  text-align: center;\r\n\r\n  h3 {\r\n    margin: 10px 0 0 0;\r\n  }\r\n\r\n  p {\r\n    margin: 5px 0;\r\n  }\r\n`;\r\n\r\nexport const Image = styled.img`\r\n  display: block;\r\n  width: 100%;\r\n  height: 200px;\r\n  object-fit: cover;\r\n  border-radius: 15px;\r\n`;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types'; // PropTypes is a way to validate the props passed to a component.\r\n// Styles\r\nimport { Wrapper, Image } from './Actor.styles';\r\n\r\nconst Actor = ({ name, character, imageUrl }) => (\r\n  <Wrapper>\r\n    <Image src={imageUrl} alt={name} />\r\n    <h3>{name}</h3>\r\n    <p>{character}</p>\r\n  </Wrapper>\r\n);\r\n\r\nActor.propTypes = {\r\n  name: PropTypes.string,\r\n  character: PropTypes.string,\r\n  imageUrl: PropTypes.string,\r\n};\r\n\r\nexport default Actor;\r\n","import React from 'react';\r\nimport { useParams } from 'react-router-dom';\r\n// Config\r\nimport { IMAGE_BASE_URL, POSTER_SIZE } from '../config';\r\n// Components\r\nimport Grid from './Grid';\r\nimport Spinner from './Spinner';\r\nimport BreadCrumb from './BreadCrumb';\r\nimport MovieInfo from './MovieInfo';\r\nimport MovieInfoBar from './MovieInfoBar';\r\nimport Actor from './Actor';\r\n// Hook\r\nimport { useMovieFetch } from '../hooks/useMovieFetch';\r\n\r\n// Image\r\nimport NoImage from '../images/no_image.jpg';\r\n\r\nconst Movie = () => {\r\n  const { movieId } = useParams(); // useParams is a hook that returns an object with the params from the url\r\n  const { state: movie, loading, error } = useMovieFetch(movieId); // movieId is passed from the parent component\r\n\r\n  if (loading) return <Spinner />;\r\n  if (error) return <div>Something went wrong ...</div>;\r\n\r\n  return (\r\n    <>\r\n      <BreadCrumb movieTitle={movie.original_title} />\r\n      <MovieInfo movie={movie} />\r\n      <MovieInfoBar\r\n        time={movie.runtime}\r\n        budget={movie.budget}\r\n        revenue={movie.revenue}\r\n      />\r\n      <Grid header=\"Actors\">\r\n        {movie.actors.map((actor) => (\r\n          <Actor\r\n            key={actor.credit_id}\r\n            actor={actor}\r\n            name={actor.name}\r\n            character={actor.character}\r\n            imageUrl={\r\n              actor.profile_path\r\n                ? `${IMAGE_BASE_URL}${POSTER_SIZE}${actor.profile_path}`\r\n                : NoImage\r\n            }\r\n          />\r\n        ))}\r\n      </Grid>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Movie;\r\n","import { useState, useEffect } from 'react';\r\nimport API from '../API';\r\n// Helpers\r\nimport { isPersistedState } from '../helpers';\r\n\r\nexport const useMovieFetch = (movieId) => {\r\n  const [state, setState] = useState({}); // initial state as an empty object because we don't know what data we'll get back from the API yet\r\n  const [loading, setLoading] = useState(true); // initial state as true because we don't know if the API call is done yet\r\n  const [error, setError] = useState(false); // initial state as false because we don't know if there's an error\r\n\r\n  useEffect(() => {\r\n    //\r\n    const fetchMovie = async () => {\r\n      try {\r\n        setError(false);\r\n        setLoading(true);\r\n\r\n        const movie = await API.fetchMovie(movieId);\r\n        const credits = await API.fetchCredits(movieId);\r\n        // Get directors only\r\n        const directors = credits.crew.filter(\r\n          (member) => member.job === 'Director',\r\n        );\r\n\r\n        setState({\r\n          ...movie,\r\n          actors: credits.cast,\r\n          directors,\r\n        });\r\n\r\n        setLoading(false);\r\n      } catch (error) {\r\n        setError(true);\r\n      }\r\n    };\r\n\r\n    const sessionState = isPersistedState(movieId);\r\n\r\n    if (sessionState) {\r\n      setState(sessionState);\r\n      setLoading(false);\r\n      return;\r\n    }\r\n\r\n    fetchMovie();\r\n  }, [movieId]); // this is the array of dependencies that we want to watch for changes\r\n\r\n  // Write to sessionStorage\r\n  useEffect(() => {\r\n    sessionStorage.setItem(movieId, JSON.stringify(state)); // write to sessionStorage only if searchTerm is empty (initial state)\r\n  }, [state, movieId]);\r\n\r\n  return { state, loading, error };\r\n};\r\n","import React from 'react';\r\n\r\nconst NotFound = () => <div>Not found</div>;\r\n\r\nexport default NotFound;\r\n","import { createGlobalStyle } from 'styled-components';\r\n\r\nexport const GlobalStyle = createGlobalStyle`\r\n  :root {\r\n    --maxWidth: 1280px;\r\n    --white: #fff;\r\n    --lightGrey: #eee;\r\n    --medGrey: #353535;\r\n    --darkGrey: #1c1c1c;\r\n    --fontSuperBig: 2.5rem;\r\n    --fontBig: 1.5rem;\r\n    --fontMed: 1.2rem;\r\n    --fontSmall: 1rem;\r\n  }\r\n  * {\r\n    box-sizing: border-box;\r\n    font-family: 'Abel', sans-serif;\r\n  }\r\n  body {\r\n    margin: 0;\r\n    padding: 0;\r\n    \r\n    h1 {\r\n      font-size: 2rem;\r\n      font-weight: 600;\r\n      color: var(--white);\r\n    }\r\n    h3 {\r\n      font-size: 1.1rem;\r\n      font-weight: 600;\r\n    }\r\n    p {\r\n      font-size: 1rem;\r\n      color: var(--white);\r\n      letter-spacing: 0.07rem;\r\n    }\r\n  }\r\n`;\r\n","import React from 'react';\n// Routing\nimport { BrowserRouter as Router, Routes, Route } from 'react-router-dom';\n\n// Components\nimport Header from './components/Header';\nimport Home from './components/Home';\nimport Movie from './components/Movie';\nimport NotFound from './components/NotFound';\n\n// Styles\nimport { GlobalStyle } from './GlobalStyle';\n\nconst App = () => (\n  <Router>\n    <Header />\n    <Routes>\n      <Route path=\"/\" element={<Home />} />\n      <Route path=\"/:movieId\" element={<Movie />} />\n      <Route path=\"/*\" element={<NotFound />} />\n    </Routes>\n\n    <GlobalStyle />\n  </Router>\n);\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}